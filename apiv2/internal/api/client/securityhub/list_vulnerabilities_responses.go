// Code generated by go-swagger; DO NOT EDIT.

package securityhub

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/mittwald/goharbor-client/v5/apiv2/model"
)

// ListVulnerabilitiesReader is a Reader for the ListVulnerabilities structure.
type ListVulnerabilitiesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListVulnerabilitiesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListVulnerabilitiesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListVulnerabilitiesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListVulnerabilitiesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListVulnerabilitiesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListVulnerabilitiesOK creates a ListVulnerabilitiesOK with default headers values
func NewListVulnerabilitiesOK() *ListVulnerabilitiesOK {
	return &ListVulnerabilitiesOK{}
}

/*ListVulnerabilitiesOK handles this case with default header values.

The vulnerability list.
*/
type ListVulnerabilitiesOK struct {
	/*Link refers to the previous page and next page
	 */
	Link string
	/*The total count of vulnerabilities
	 */
	XTotalCount int64

	Payload []*model.VulnerabilityItem
}

func (o *ListVulnerabilitiesOK) Error() string {
	return fmt.Sprintf("[GET /security/vul][%d] listVulnerabilitiesOK  %+v", 200, o.Payload)
}

func (o *ListVulnerabilitiesOK) GetPayload() []*model.VulnerabilityItem {
	return o.Payload
}

func (o *ListVulnerabilitiesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Link
	o.Link = response.GetHeader("Link")

	// response header X-Total-Count
	xTotalCount, err := swag.ConvertInt64(response.GetHeader("X-Total-Count"))
	if err != nil {
		return errors.InvalidType("X-Total-Count", "header", "int64", response.GetHeader("X-Total-Count"))
	}
	o.XTotalCount = xTotalCount

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVulnerabilitiesBadRequest creates a ListVulnerabilitiesBadRequest with default headers values
func NewListVulnerabilitiesBadRequest() *ListVulnerabilitiesBadRequest {
	return &ListVulnerabilitiesBadRequest{}
}

/*ListVulnerabilitiesBadRequest handles this case with default header values.

Bad request
*/
type ListVulnerabilitiesBadRequest struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ListVulnerabilitiesBadRequest) Error() string {
	return fmt.Sprintf("[GET /security/vul][%d] listVulnerabilitiesBadRequest  %+v", 400, o.Payload)
}

func (o *ListVulnerabilitiesBadRequest) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ListVulnerabilitiesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVulnerabilitiesUnauthorized creates a ListVulnerabilitiesUnauthorized with default headers values
func NewListVulnerabilitiesUnauthorized() *ListVulnerabilitiesUnauthorized {
	return &ListVulnerabilitiesUnauthorized{}
}

/*ListVulnerabilitiesUnauthorized handles this case with default header values.

Unauthorized
*/
type ListVulnerabilitiesUnauthorized struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ListVulnerabilitiesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /security/vul][%d] listVulnerabilitiesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListVulnerabilitiesUnauthorized) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ListVulnerabilitiesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVulnerabilitiesInternalServerError creates a ListVulnerabilitiesInternalServerError with default headers values
func NewListVulnerabilitiesInternalServerError() *ListVulnerabilitiesInternalServerError {
	return &ListVulnerabilitiesInternalServerError{}
}

/*ListVulnerabilitiesInternalServerError handles this case with default header values.

Internal server error
*/
type ListVulnerabilitiesInternalServerError struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ListVulnerabilitiesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /security/vul][%d] listVulnerabilitiesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListVulnerabilitiesInternalServerError) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ListVulnerabilitiesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
